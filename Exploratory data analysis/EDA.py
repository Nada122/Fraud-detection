# -*- coding: utf-8 -*-
"""EDA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1njSpTcI4tqoX7CLOdHk5cdWveb5i4sLm
"""

import pandas as pd
import plotly.offline as po
import plotly.graph_objs as go
from plotly.subplots import make_subplots
import warnings
from  jinja2 import Environment, FileSystemLoader # Import Jinja2

warnings.filterwarnings("ignore")

# Initialize plotly notebook mode for offline plotting
po.init_notebook_mode(connected=True)

# Define a consistent color palette
COLORS = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd',
          '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf']

# Define a standard layout for plots
def get_layout(title):
    """
    Returns a standardized layout dictionary for Plotly figures.

    Args:
        title (str): The title of the plot.

    Returns:
        dict: A dictionary containing the layout configuration.
    """
    layout = go.Layout(
        title=title,
        title_font=dict(size=24, family="Arial"), # Added font family
        xaxis=dict(
            title_font=dict(size=18, family="Arial"),
            tickfont=dict(size=14, family="Arial"),
            gridcolor='lightgray',
            zerolinecolor='lightgray' # Added zeroline color
        ),
        yaxis=dict(
            title_font=dict(size=18, family="Arial"),
            tickfont=dict(size=14, family="Arial"),
            gridcolor='lightgray',
            zerolinecolor='lightgray' # Added zeroline color
        ),
        plot_bgcolor='white',
        hovermode='closest',
        legend=dict(
            font=dict(size=12, family="Arial"), # Added font family
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="right",
            x=1
        ),
        margin=dict(l=100, r=50, b=80, t=100),
    )
    return layout

def create_histogram(data, x, title, xlabel, ylabel, color=COLORS[0]):
    """
    Creates an interactive histogram using Plotly.

    Args:
        data (pd.DataFrame): The input DataFrame.
        x (str): The column name for the x-axis.
        title (str): The title of the plot.
        xlabel (str): The label for the x-axis.
        ylabel (str): The label for the y-axis.
        color (str, optional): The color of the histogram bars. Defaults to the first color in `COLORS`.

    Returns:
        plotly.graph_objs._figure.Figure: A Plotly Figure object.
    """
    trace = go.Histogram(
        x=data[x],
        marker=dict(color=color),
        opacity=0.75,
        name=xlabel,  # Use xlabel as the name for the legend/tooltip
        hovertemplate=f'<b>{xlabel}:</b> %{{x}}<br><b>{ylabel}:</b> %{{y}}' # Added hovertemplate
    )
    layout = get_layout(title)
    layout.xaxis.title = xlabel
    layout.yaxis.title = ylabel
    fig = go.Figure(data=[trace], layout=layout)
    return fig

def create_bar_chart(data, x, y, title, xlabel, ylabel, color=COLORS[1],
                       text_auto=False):
    """
    Creates an interactive bar chart using Plotly.

    Args:
        data (pd.DataFrame): The input DataFrame.
        x (str): The column name for the x-axis.
        y (str): The column name for the y-axis.
        title (str): The title of the plot.
        xlabel (str): The label for the x-axis.
        ylabel (str): The label for the y-axis.
        color (str, optional): The color of the bars. Defaults to the second color in `COLORS`.
        text_auto (bool, optional): Whether to automatically display text labels. Defaults to False.

    Returns:
        plotly.graph_objs._figure.Figure: A Plotly Figure object.
    """
    trace = go.Bar(
        x=data[x],
        y=data[y],
        marker=dict(color=color),
        name=xlabel,  # Use xlabel as the name
        text=data[y] if text_auto else None,  # Add text labels if text_auto is True
        textposition='outside' if text_auto else 'auto', # Position text
        cliponaxis=False,
        hovertemplate=f'<b>{xlabel}:</b> %{{x}}<br><b>{ylabel}:</b> %{{y}}' # Added hovertemplate
    )
    layout = get_layout(title)
    layout.xaxis.title = xlabel
    layout.yaxis.title = ylabel
    fig = go.Figure(data=[trace], layout=layout)
    return fig

def create_line_chart(data, x, y, title, xlabel, ylabel, color=COLORS[2]):
    """
    Creates an interactive line chart using Plotly.

    Args:
        data (pd.DataFrame): The input DataFrame.
        x (str): The column name for the x-axis.
        y (str): The column name for the y-axis.
        title (str): The title of the plot.
        xlabel (str): The label for the x-axis.
        ylabel (str): The label for the y-axis.
        color (str, optional): The color of the line. Defaults to the third color in `COLORS`.

    Returns:
        plotly.graph_objs._figure.Figure: A Plotly Figure object.
    """
    trace = go.Scatter(
        x=data[x],
        y=data[y],
        mode='lines+markers',
        marker=dict(color=color),
        line=dict(color=color),
        name=ylabel,
        hovertemplate=f'<b>{xlabel}:</b> %{{x}}<br><b>{ylabel}:</b> %{{y}}'  # Added hovertemplate
    )
    layout = get_layout(title)
    layout.xaxis.title = xlabel
    layout.yaxis.title = ylabel
    fig = go.Figure(data=[trace], layout=layout)
    return fig

def create_boxplot(data, x, y, title, xlabel, ylabel, color=COLORS[3]):
    """
    Creates an interactive boxplot using Plotly.

    Args:
        data (pd.DataFrame): The input DataFrame.
        x (str): The column name for the x-axis.
        y (str): The column name for the y-axis.
        title (str): The title of the plot.
        xlabel (str): The label for the x-axis.
        ylabel (str): The label for the y-axis.
        color (str, optional): The color of the boxplot. Defaults to the fourth color in `COLORS`.

    Returns:
        plotly.graph_objs._figure.Figure: A Plotly Figure object.
    """
    trace = go.Box(
        x=data[x],
        y=data[y],
        marker=dict(color=color),
        name=xlabel,
        hovertemplate=f'<b>{xlabel}:</b> %{{x}}<br><b>{ylabel}:</b> %{{y}}' # Added hovertemplate
    )
    layout = get_layout(title)
    layout.xaxis.title = xlabel
    layout.yaxis.title = ylabel
    fig = go.Figure(data=[trace], layout=layout)
    return fig

def create_stacked_bar_chart(data, x, y, color_col, title, xlabel, ylabel, colors=COLORS):
    """
    Creates an interactive stacked bar chart using Plotly.

    Args:
        data (pd.DataFrame): The input DataFrame.
        x (str): The column name for the x-axis.
        y (str): The column name for the y-axis.
        color_col (str): The column name to determine the color of the segments.
        title (str): The title of the plot.
        xlabel (str): The label for the x-axis.
        ylabel (str): The label for the y-axis.
        colors (list, optional): A list of colors for the segments. Defaults to `COLORS`.

    Returns:
        plotly.graph_objs._figure.Figure: A Plotly Figure object.
    """
    unique_colors = data[color_col].unique()
    traces = []
    for i, color_value in enumerate(unique_colors):
        filtered_data = data[data[color_col] == color_value]
        trace = go.Bar(
            x=filtered_data[x],
            y=filtered_data[y],
            marker=dict(color=colors[i % len(colors)]),  # Cycle through colors
            name=color_value,
            hovertemplate=f'<b>{xlabel}:</b> %{{x}}<br><b>{ylabel}:</b> %{{y}}<br><b>{color_col}:</b> {color_value}' # Added
        )
        traces.append(trace)
    layout = get_layout(title)
    layout.xaxis.title = xlabel
    layout.yaxis.title = ylabel
    layout.barmode = 'stack'
    fig = go.Figure(data=traces, layout=layout)
    return fig

def create_subplots(data, x, y1, y2, title, xlabel, ylabel1, ylabel2,
                    color1=COLORS[4], color2=COLORS[5], type='bar'):
    """
    Creates a figure with two subplots (columns) using Plotly.

    Args:
        data (pd.DataFrame): The input DataFrame.
        x (str): The column name for the x-axis.
        y1 (str): The column name for the y-axis for the first subplot.
        y2 (str): The column name for the y-axis for the second subplot.
        title (str): The title of the entire figure.
        xlabel (str): The label for the x-axis.
        ylabel1 (str): The label for the y-axis for the first subplot.
        ylabel2 (str): The label for the y-axis for the second subplot.
        color1 (str, optional): The color for the first subplot. Defaults to the fifth color in `COLORS`.
        color2 (str, optional): The color for the second subplot. Defaults to the sixth color in `COLORS`.
        type (str, optional): The type of plot to create ('bar' or 'line'). Defaults to 'bar'.

    Returns:
        plotly.graph_objs._figure.Figure: A Plotly Figure object.
    """

    fig = make_subplots(rows=1, cols=2,
                        subplot_titles=(ylabel1, ylabel2),column_widths=[0.5, 0.5])  # Subplot titles

    if type == 'bar':
        trace1 = go.Bar(x=data[x], y=data[y1], marker_color=color1, name=ylabel1,
                        hovertemplate=f'<b>{xlabel}:</b> %{{x}}<br><b>{ylabel1}:</b> %{{y}}') # Added
        trace2 = go.Bar(x=data[x], y=data[y2], marker_color=color2, name=ylabel2,
                        hovertemplate=f'<b>{xlabel}:</b> %{{x}}<br><b>{ylabel2}:</b> %{{y}}') # Added
    elif type == 'line':
        trace1 = go.Scatter(x=data[x], y=data[y1], marker_color=color1, mode='lines+markers', name=ylabel1,
                            hovertemplate=f'<b>{xlabel}:</b> %{{x}}<br><b>{ylabel1}:</b> %{{y}}') # Added
        trace2 = go.Scatter(x=data[x], y=data[y2], marker_color=color2, mode='lines+markers', name=ylabel2,
                            hovertemplate=f'<b>{xlabel}:</b> %{{x}}<br><b>{ylabel2}:</b> %{{y}}') # Added
    else:
        raise ValueError("Invalid plot type. Choose 'bar' or 'line'.")

    fig.add_trace(trace1, row=1, col=1)
    fig.add_trace(trace2, row=1, col=2)
    layout = get_layout(title)
    layout.xaxis.title = xlabel  # Apply xlabel to the whole figure
    layout.legend = dict(orientation='h',    yanchor='bottom',
    y=-0.4,
    xanchor='center',
    x=0.5,
    font=dict(size=12))



    #  layout.yaxis.title = ylabel # Remove this to avoid applying to the whole figure.

    fig.update_layout(layout)  # Apply the layout
    return fig

def create_time_difference_histogram(df):
    """
    Creates a histogram of the time difference between transactions.

    Args:
        df (pd.DataFrame): The input DataFrame containing transaction data
                           with 'TransactionDate' and 'PreviousTransactionDate' columns.

    Returns:
        plotly.graph_objs._figure.Figure: A Plotly Figure object.
    """
    # Ensure both 'TransactionDate' and 'PreviousTransactionDate' are in datetime format
    df['TransactionDate'] = pd.to_datetime(df['TransactionDate'])
    df['PreviousTransactionDate'] = pd.to_datetime(df['PreviousTransactionDate'])

    # Create a new column 'TransactionTimeDiff' to calculate the difference in hours
    df['TransactionTimeDiff'] = (df['TransactionDate'] - df['PreviousTransactionDate']).dt.total_seconds() / 3600

    # Remove infinite values
    df = df[df['TransactionTimeDiff'] != float('inf')]

    # Plot histogram of the time differences
    fig = create_histogram(
        df,
        x='TransactionTimeDiff',
        title='Distribution of Time Between Transactions (Hours)',
        xlabel='Hours Between Transactions',
        ylabel='Frequency',
        color=COLORS[7]
    )
    return fig


def create_eda_dashboard(df, filename="eda_dashboard.html"):
    """
    Generates an HTML dashboard containing EDA plots from the input DataFrame.

    Args:
        df (pd.DataFrame): The input DataFrame.
        filename (str, optional): The name of the HTML file to save the dashboard.
            Defaults to "eda_dashboard.html".
    """

    # 1. Count of transactions per Account
    transaction_counts = df['AccountID'].value_counts().reset_index()
    transaction_counts.columns = ['AccountID', 'TransactionCount']
    fig1 = create_histogram(
        transaction_counts,
        x='TransactionCount',
        title='Distribution of Number of Transactions per Account',
        xlabel='Number of Transactions',
        ylabel='Number of Accounts',
        color=COLORS[0]
    )

    # 2. Distribution of Customer Age
    unique_account_ages = df.drop_duplicates(subset='AccountID')['CustomerAge'].reset_index()
    fig2 = create_histogram(
        unique_account_ages,
        x='CustomerAge',
        title='Customer Age Distribution per Account',
        xlabel='Customer Age',
        ylabel='Frequency',
        color=COLORS[1]
    )

    # 3. Distribution of Customer Occupation
    unique_account_occupations = df.drop_duplicates(subset='AccountID')['CustomerOccupation'].value_counts().reset_index()
    unique_account_occupations.columns = ['CustomerOccupation','Frequency']
    fig3 = create_bar_chart(
        unique_account_occupations,
        x='CustomerOccupation',
        y='Frequency',
        title='Customer Occupation Distribution per Account',
        xlabel='Customer Occupation',
        ylabel='Frequency',
        color=COLORS[2],
        text_auto=True
    )

    # 4. Total Transaction Amount per Day
    df['TransactionDateOnly'] = pd.to_datetime(df['TransactionDate']).dt.date
    daily_total_amount = df.groupby('TransactionDateOnly')['TransactionAmount'].sum().reset_index()
    fig4 = create_line_chart(
        daily_total_amount,
        x='TransactionDateOnly',
        y='TransactionAmount',
        title='Total Transaction Amount per Day',
        xlabel='Date',
        ylabel='Total Transaction Amount',
        color=COLORS[3]
    )

   # 5. Total Transaction Amount by Transaction Type
    type_totals = df.groupby('TransactionType')['TransactionAmount'].sum().reset_index()
    type_totals = type_totals.sort_values(by='TransactionAmount', ascending=False)
    fig5 = create_bar_chart(
        type_totals,
        x='TransactionType',
        y='TransactionAmount',
        title='Total Transaction Amount by Transaction Type',
        xlabel='Transaction Type',
        ylabel='Total Transaction Amount',
        color=COLORS[4],
        text_auto=True
    )

    # 6. Transaction Metrics by Transaction Type (Sum, Average, Count)
    sum_transaction = df.groupby('TransactionType')['TransactionAmount'].sum().reset_index(name='TotalAmount')
    avg_transaction = df.groupby('TransactionType')['TransactionAmount'].mean().reset_index(name='AverageAmount')
    count_transaction = df.groupby('TransactionType')['TransactionAmount'].count().reset_index(name='TransactionCount')

    fig6 = create_subplots(
        pd.merge(sum_transaction, pd.merge(avg_transaction, count_transaction, on='TransactionType'), on='TransactionType'),
        x='TransactionType',
        y1='TotalAmount',
        y2='AverageAmount',
        title='Transaction Metrics per Transaction Type',
        xlabel='Transaction Type',
        ylabel1='Total Amount',
        ylabel2='Average Amount',
        color1=COLORS[0],
        color2=COLORS[1],
        type='bar'
    )
    fig7 = create_bar_chart(count_transaction,
                           x='TransactionType',
                           y='TransactionCount',
                           title = "Transaction Count per TransactionType",
                           xlabel = "Transaction Type",
                           ylabel= "Transaction Count",
                           color = COLORS[2],
                           text_auto=True)

    # 7. Transaction Amount Distribution per Transaction Type
    fig8 = create_boxplot(
        df,
        x='TransactionType',
        y='TransactionAmount',
        title='Transaction Amount Distribution per Transaction Type',
        xlabel='Transaction Type',
        ylabel='Transaction Amount',
        color=COLORS[5]
    )

    # 8. Total Transaction Amount by Transaction Type and Channel
    grouped = df.groupby(['TransactionType', 'Channel'])['TransactionAmount'].sum().reset_index()
    fig9 = create_stacked_bar_chart(
        grouped,
        x='TransactionType',
        y='TransactionAmount',
        color_col='Channel',
        title='Total Transaction Amount by Transaction Type and Channel',
        xlabel='Transaction Type',
        ylabel='Total Transaction Amount'
    )

    # 9. Credit/Debit Usage per Age Group
    age_bins = range(0, 101, 5)
    age_labels = [f'{i}-{i+4}' for i in age_bins[:-1]]
    df['AgeGroup'] = pd.cut(df['CustomerAge'], bins=age_bins, labels=age_labels, right=False)
    usage_per_age_group = df.groupby(['AgeGroup', 'TransactionType']).size().unstack(fill_value=0).reset_index()
    usage_per_age_group = usage_per_age_group.melt(id_vars='AgeGroup', var_name='TransactionType', value_name='Count')
    usage_per_age_group_percentage = usage_per_age_group.copy()
    usage_per_age_group_percentage['Total'] = usage_per_age_group_percentage.groupby('AgeGroup')['Count'].transform('sum')
    usage_per_age_group_percentage['Percentage'] = (usage_per_age_group_percentage['Count'] / usage_per_age_group_percentage['Total']) * 100
    fig10 = create_stacked_bar_chart(
        usage_per_age_group_percentage,
        x='AgeGroup',
        y='Percentage',
        color_col='TransactionType',
        title='Percentage of Credit or Debit Usage per Age Group (5-Year Ranges)',
        xlabel='Customer Age Group',
        ylabel='Percentage of Transactions (%)'
    )

    # 10. Credit/Debit Usage per Occupation Group
    usage_per_occupation_group = df.groupby(['CustomerOccupation', 'TransactionType']).size().unstack(fill_value=0).reset_index()
    usage_per_occupation_group = usage_per_occupation_group.melt(id_vars='CustomerOccupation', var_name='TransactionType', value_name='Count')
    usage_per_occupation_group_percentage = usage_per_occupation_group.copy()
    usage_per_occupation_group_percentage['Total'] = usage_per_occupation_group_percentage.groupby('CustomerOccupation')['Count'].transform('sum')
    usage_per_occupation_group_percentage['Percentage'] = (usage_per_occupation_group_percentage['Count'] / usage_per_occupation_group_percentage['Total']) * 100

    fig11 = create_stacked_bar_chart(
        usage_per_occupation_group_percentage,
        x='CustomerOccupation',
        y='Percentage',
        color_col='TransactionType',
        title='Percentage of Credit or Debit Usage per Occupation Group',
        xlabel='Customer Occupation',
        ylabel='Percentage of Transactions (%)'
    )


    # 11. Transaction Amount by Age Group (Total and Average)
    total_spent = df.groupby('AgeGroup')['TransactionAmount'].sum().reset_index(name='TotalAmount')
    avg_spent = df.groupby('AgeGroup')['TransactionAmount'].mean().reset_index(name='AverageAmount')
    fig12 = create_subplots(
        pd.merge(total_spent, avg_spent, on='AgeGroup'),
        x='AgeGroup',
        y1='TotalAmount',
        y2='AverageAmount',
        title='Transaction Amount per Age Group',
        xlabel='Age Group',
        ylabel1='Total Transaction Amount',
        ylabel2='Average Transaction Amount',
        color1=COLORS[0],
        color2=COLORS[1],
        type='bar'
    )
    fig12.update_layout(xaxis_tickangle=-45)

    # 12. Transaction Amount by Occupation (Total and Average)
    total_spent_occupation = df.groupby('CustomerOccupation')['TransactionAmount'].sum().reset_index(name='TotalAmount')
    avg_spent_occupation = df.groupby('CustomerOccupation')['TransactionAmount'].mean().reset_index(name='AverageAmount')

    fig13 = create_subplots(
        pd.merge(total_spent_occupation, avg_spent_occupation, on='CustomerOccupation'),
        x='CustomerOccupation',
        y1='TotalAmount',
        y2='AverageAmount',
        title='Transaction Amount per Customer Occupation',
        xlabel='Customer Occupation',
        ylabel1='Total Transaction Amount',
        ylabel2='Average Transaction Amount',
        color1=COLORS[2],
        color2=COLORS[3],
        type='bar'
    )

    # 13. Average Transaction Duration per Channel
    avg_transaction_duration_per_channel = df.groupby('Channel')['TransactionDuration'].mean().reset_index()
    fig14 = create_bar_chart(
        avg_transaction_duration_per_channel,
        x='Channel',
        y='TransactionDuration',
        title='Average Transaction Duration per Channel',
        xlabel='Transaction Channel',
        ylabel='Average Transaction Duration',
        color=COLORS[4],
        text_auto=True
    )

    # 14. Transaction Duration Distribution per Channel
    fig15 = create_boxplot(
        df,
        x='Channel',
        y='TransactionDuration',
        title='Transaction Duration Distribution per Channel',
        xlabel='Transaction Channel',
        ylabel='Transaction Duration',
        color=COLORS[6]
    )

    # 15. Average Login Attempts per Channel
    avg_login_attempts_per_channel = df.groupby('Channel')['LoginAttempts'].mean().reset_index()
    fig16 = create_bar_chart(
        avg_login_attempts_per_channel,
        x='Channel',
        y='LoginAttempts',
        title='Average Login Attempts per Channel',
        xlabel='Transaction Channel',
        ylabel='Average Login Attempts',
        color=COLORS[1],
        text_auto=True
    )

    # 16. Unique IP Count per Account
    ip_count_per_account = df.groupby('AccountID')['IP Address'].nunique().reset_index(name='UniqueIPCount')
    fig17 = create_histogram(
        ip_count_per_account,
        x='UniqueIPCount',
        title='Number of Unique IP Addresses per Account',
        xlabel='Number of Unique IP Addresses',
        ylabel='Number of Accounts',
        color=COLORS[8]
    )

    # 17. IP Address Transaction Stats
    ip_transaction_stats = df.groupby('IP Address')['TransactionAmount'].agg(['sum', 'mean', 'count']).reset_index()

    top_ips_by_sum = ip_transaction_stats.sort_values(by='sum', ascending=False).head(10) # Adjusted to top 10 for better visualization
    bottom_ips_by_sum = ip_transaction_stats.sort_values(by='sum', ascending=True).head(10) # Adjusted to bottom 10
    top_ips_by_avg = ip_transaction_stats.sort_values(by='mean', ascending=False).head(10) # Adjusted to top 10
    bottom_ips_by_avg = ip_transaction_stats.sort_values(by='mean', ascending=True).head(10) # Adjusted to bottom 10

    fig18 = create_subplots(
        top_ips_by_sum,
        x='IP Address',
        y1='sum',
        y2='mean',
        title='Top 10 IPs by Total and Average Transaction Amount',
        xlabel='IP Address',
        ylabel1='Total Transaction Amount',
        ylabel2='Average Transaction Amount',
        color1=COLORS[0],
        color2=COLORS[1],
        type='bar'
    )

    fig19 = create_subplots(
        bottom_ips_by_sum,
        x='IP Address',
        y1='sum',
        y2='mean',
        title='Bottom 10 IPs by Total and Average Transaction Amount',
        xlabel='IP Address',
        ylabel1='Total Transaction Amount',
        ylabel2='Average Transaction Amount',
        color1=COLORS[2],
        color2=COLORS[3],
        type='bar'
    )

    fig20 = create_bar_chart(top_ips_by_avg, x='IP Address', y='count',
                           title='Top 10 IPs by Transaction Count',
                           xlabel='IP Address', ylabel='Transaction Count',
                           color=COLORS[4], text_auto=True)
    fig21 = create_bar_chart(bottom_ips_by_avg, x='IP Address', y='count',
                           title='Bottom 10 IPs by Transaction Count',
                           xlabel='IP Address', ylabel='Transaction Count',
                           color=COLORS[5], text_auto=True)

    # 18. Time Difference Between Transactions
    fig22 = create_time_difference_histogram(df)

    # 19. Average Account Balance per AgeGroup
    age_group_balance = df.groupby('AgeGroup')['AccountBalance'].mean().reset_index()
    fig23 = create_bar_chart(
        age_group_balance,
        x='AgeGroup',
        y='AccountBalance',
        title='Average Account Balance per Age Group (5-year bins)',
        xlabel='Age Group',
        ylabel='Average Account Balance',
        color=COLORS[6],
        text_auto=True
    )
    fig23.update_layout(xaxis_tickangle=-45)

    # 20. Average Account Balance per Occupation
    occupation_balance = df.groupby('CustomerOccupation')['AccountBalance'].mean().reset_index()
    fig24 = create_bar_chart(
        occupation_balance,
        x='CustomerOccupation',
        y='AccountBalance',
        title='Average Account Balance per Customer Occupation',
        xlabel='Customer Occupation',
        ylabel='Average Account Balance',
        color=COLORS[7],
        text_auto=True
    )



    # Create a list of all figures
    figures = [fig1, fig2, fig3, fig4, fig5, fig6, fig7, fig8, fig9, fig10,
               fig11, fig12, fig13, fig14, fig15, fig16, fig17, fig18, fig19, fig20, fig21, fig22, fig23, fig24]

    # --- HTML Generation using Jinja2 ---
    env = Environment(loader=FileSystemLoader('.'))  # Load templates from the current directory
    template = env.from_string("""
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>EDA Dashboard</title>
        <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
        <link rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css2?family=Arial:wght@400;700&display=swap">
        <style>
            body {
                font-family: 'Arial', sans-serif;
                margin: 0;
                padding: 0;
                background-color: #f4f4f4;
                color: #333;
                line-height: 1.6;
            }
            .container {
                max-width: 95%; /* Increased max-width for wider screens */
                margin: 20px auto;
                padding: 20px;
                background-color: white;
                border-radius: 10px;
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            }
            h1 {
                color: #2c3e50;
                text-align: center;
                margin-bottom: 30px;
                font-size: 2.5em;
            }
            h2 {
                color: #34495e;
                margin-top: 40px;
                margin-bottom: 20px;
                border-bottom: 2px solid #bdc3c7;
                padding-bottom: 10px;
                font-size: 2em;
            }
            .plot-container {
                margin-bottom: 30px;
                border: 1px solid #e0e0e0;
                border-radius: 8px;
                padding: 10px;
                background-color: #f9f9f9;
            }
            /* Add styling for the description paragraphs */
            .description {
                margin-bottom: 20px;
                color: #555;
            }
            /* Style for table */
            table {
                width: 100%;
                border-collapse: collapse;
                margin-top: 20px;
                margin-bottom: 30px;
                background-color: white;
                border-radius: 8px;
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
            }

            th, td {
                border: 1px solid #e0e0e0;
                padding: 12px;
                text-align: left;
            }

            th {
                background-color: #f0f0f0;
                font-weight: bold;
            }
            /* Style for chart titles */
            .chart-title {
                color: #2c3e50;
                font-size: 1.5em;
                margin-bottom: 15px;
                text-align: center;
            }

        </style>
    </head>
    <body>
        <div class="container">
            <h1>Exploratory Data Analysis Dashboard</h1>

            <p class="description">
                This dashboard provides an interactive exploration of the bank transactions data.
                Use the plots and tables below to gain insights into customer behavior,
                transaction patterns, and other relevant metrics.
            </p>

            <h2>Number of Transactions per Account</h2>
            <div class="plot-container">
                <div class="chart-title">Distribution of Number of Transactions per Account</div>
                {{ fig1 }}
                <p class = "description">This histogram shows the distribution of the number of transactions for each account.  It helps to understand how frequently customers interact with their accounts.</p>
            </div>

            <h2>Customer Age Distribution</h2>
            <div class="plot-container">
                <div class="chart-title">Customer Age Distribution per Account</div>
                {{ fig2 }}
                <p class = "description">This histogram displays the age distribution of the customers.  Understanding the age demographics can be crucial for tailoring services and marketing efforts.</p>
            </div>

            <h2>Customer Occupation Distribution</h2>
            <div class="plot-container">
                <div class="chart-title">Customer Occupation Distribution per Account</div>
                {{ fig3 }}
                <p class = "description">This bar chart shows the distribution of customer occupations.  This information can be useful in understanding the economic background of the customer base.</p>
            </div>

            <h2>Total Transaction Amount per Day</h2>
            <div class="plot-container">
                <div class="chart-title">Total Transaction Amount per Day</div>
                {{ fig4 }}
                 <p class = "description">This line chart shows the total transaction amount per day.  It helps identify trends and patterns in daily transaction volumes.</p>
            </div>

            <h2>Total Transaction Amount by Type</h2>
            <div class="plot-container">
                <div class="chart-title">Total Transaction Amount by Transaction Type</div>
                {{ fig5 }}
                <p class = "description">This bar chart shows the total transaction amount for each transaction type.  It helps in understanding which transaction types contribute the most to the overall transaction volume.</p>
            </div>

            <h2>Transaction Metrics by Type</h2>
            <div class="plot-container">
                 <div class="chart-title">Transaction Metrics per Transaction Type</div>
                {{ fig6 }}
                 <p class = "description">This chart shows Total and Average Transaction Amounts for each Transaction Type.</p>
            </div>
            <div class="plot-container">
                <div class = "chart-title">Transaction Count per Transaction Type</div>
                {{fig7}}
                <p class = "description">This chart shows the number of transactions for each Transaction Type.</p>
            </div>

            <h2>Transaction Amount Distribution by Type</h2>
            <div class="plot-container">
                <div class="chart-title">Transaction Amount Distribution per Transaction Type</div>
                {{ fig8 }}
                <p class = "description">This boxplot displays the distribution of transaction amounts for each transaction type, highlighting the variance and outliers.</p>
            </div>

            <h2>Transaction Amount by Type and Channel</h2>
            <div class="plot-container">
                 <div class="chart-title">Total Transaction Amount by Transaction Type and Channel</div>
                {{ fig9 }}
                 <p class = "description">This stacked bar chart breaks down the total transaction amount by both transaction type and the channel through which the transaction occurred.</p>
            </div>

            <h2>Credit/Debit Usage per Age Group</h2>
            <div class="plot-container">
                <div class="chart-title">Percentage of Credit or Debit Usage per Age Group (5-Year Ranges)</div>
                {{ fig10 }}
                <p class = "description">This stacked bar chart shows the percentage of credit or debit card usage across different age groups, binned in 5-year ranges.</p>
            </div>

            <h2>Credit/Debit Usage per Occupation</h2>
            <div class="plot-container">
                <div class="chart-title">Percentage of Credit or Debit Usage per Occupation Group</div>
                {{ fig11 }}
                <p class = "description">This stacked bar chart shows the percentage of credit or debit card usage by customer occupation.</p>
            </div>

            <h2>Transaction Amount by Age Group</h2>
            <div class="plot-container">
                <div class="chart-title">Transaction Amount per Age Group</div>
                {{ fig12 }}
                <p class = "description">This chart shows the Total and Average Transaction Amounts for each Age Group.</p>
            </div>

            <h2>Transaction Amount by Occupation</h2>
            <div class="plot-container">
                <div class="chart-title">Transaction Amount per Customer Occupation</div>
                {{ fig13 }}
                <p class = "description">This chart shows the Total and Average Transaction Amounts for each Customer Occupation.</p>
            </div>

            <h2>Average Transaction Duration per Channel</h2>
            <div class="plot-container">
                <div class="chart-title">Average Transaction Duration per Channel</div>
                {{ fig14 }}
                 <p class = "description">This bar chart shows how long transactions take, on average, for each channel.</p>
            </div>

            <h2>Transaction Duration Distribution per Channel</h2>
            <div class="plot-container">
                <div class="chart-title">Transaction Duration Distribution per Channel</div>
                {{ fig15 }}
                <p class = "description">This boxplot displays the distribution of transaction durations for each channel.</p>
            </div>

            <h2>Average Login Attempts per Channel</h2>
            <div class="plot-container">
                <div class="chart-title">Average Login Attempts per Channel</div>
                {{ fig16 }}
                <p class = "description">This bar chart shows the average number of login attempts for each channel.</p>
            </div>

            <h2>Unique IP Addresses per Account</h2>
            <div class="plot-container">
                <div class="chart-title">Number of Unique IP Addresses per Account</div>
                {{ fig17 }}
                <p class = "description">This histogram shows the number of unique IP addresses used per account.</p>
            </div>

            <h2>IP Address Transaction Stats</h2>
            <div class="plot-container">
                 <div class = "chart-title">Top 10 IPs by Total and Average Transaction Amount</div>
                {{ fig18 }}
                <p class = "description">This chart shows the Top 10 IPs by Total and Average Transaction Amount.</p>
            </div>
            <div class = "plot-container">
                <div class = "chart-title">Bottom 10 IPs by Total and Average Transaction Amount</div>
                {{fig19}}
                <p class = "description">This chart shows the Bottom 10 IPs by Total and Average Transaction Amount.</p>
            </div>
            <div class = "plot-container">
                <div class = "chart-title">Top 10 IPs by Transaction Count</div>
                {{fig20}}
                <p class = "description">This chart shows the Top 10 IPs by Transaction Count.</p>
            </div>
             <div class = "plot-container">
                <div class = "chart-title">Bottom 10 IPs by Transaction Count</div>
                {{fig21}}
                <p class = "description">This chart shows the Bottom 10 IPs by Transaction Count.</p>
            </div>

            <h2>Time Between Transactions</h2>
            <div class="plot-container">
                <div class="chart-title">Distribution of Time Between Transactions (Hours)</div>
                {{ fig22 }}
                <p class = "description">This histogram shows the distribution of time differences in hours between consecutive transactions.</p>
            </div>

            <h2>Average Account Balance per Age Group</h2>
            <div class="plot-container">
                <div class="chart-title">Average Account Balance per Age Group (5-year bins)</div>
                {{fig23}}
                <p class = "description">This chart shows the average account balance for each 5-year age group.</p>
            </div>

            <h2>Average Account Balance per Occupation</h2>
            <div class="plot-container">
                <div class="chart-title">Average Account Balance per Customer Occupation</div>
                {{fig24}}
                <p class = "description">This chart shows the average account balance for each Customer Occupation.</p>
            </div>
        </div>
    </body>
    </html>
    """) # Using a multiline string

    # Render the template with the figures
    html_content = template.render(
        fig1=po.plot(fig1, output_type='div', include_plotlyjs=False),
        fig2=po.plot(fig2, output_type='div', include_plotlyjs=False),
        fig3=po.plot(fig3, output_type='div', include_plotlyjs=False),
        fig4=po.plot(fig4, output_type='div', include_plotlyjs=False),
        fig5=po.plot(fig5, output_type='div', include_plotlyjs=False),
        fig6=po.plot(fig6, output_type='div', include_plotlyjs=False),
        fig7=po.plot(fig7, output_type='div', include_plotlyjs=False),
        fig8=po.plot(fig8, output_type='div', include_plotlyjs=False),
        fig9=po.plot(fig9, output_type='div', include_plotlyjs=False),
        fig10=po.plot(fig10, output_type='div', include_plotlyjs=False),
        fig11=po.plot(fig11, output_type='div', include_plotlyjs=False),
        fig12=po.plot(fig12, output_type='div', include_plotlyjs=False),
        fig13=po.plot(fig13, output_type='div', include_plotlyjs=False),
        fig14=po.plot(fig14, output_type='div', include_plotlyjs=False),
        fig15=po.plot(fig15, output_type='div', include_plotlyjs=False),
        fig16=po.plot(fig16, output_type='div', include_plotlyjs=False),
        fig17=po.plot(fig17, output_type='div', include_plotlyjs=False),
        fig18=po.plot(fig18, output_type='div', include_plotlyjs=False),
        fig19=po.plot(fig19, output_type='div', include_plotlyjs=False),
        fig20=po.plot(fig20, output_type='div', include_plotlyjs=False),
        fig21=po.plot(fig21, output_type='div', include_plotlyjs=False),
        fig22=po.plot(fig22, output_type='div', include_plotlyjs=False),
        fig23=po.plot(fig23, output_type='div', include_plotlyjs=False),
        fig24=po.plot(fig24, output_type='div', include_plotlyjs=False),
    )

    # Save the dashboard to an HTML file
    with open(filename, 'w') as f:
        f.write(html_content)

if __name__ == "__main__":
    # Load the data
    df = pd.read_csv(r'bank_transactions_data_2.csv')

    # Create and save the EDA dashboard
    create_eda_dashboard(df)
    print(f"EDA dashboard saved to eda_dashboard.html")